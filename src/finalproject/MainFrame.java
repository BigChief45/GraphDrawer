package finalproject;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import javax.swing.JFileChooser;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;


public class MainFrame extends javax.swing.JFrame 
{    
    public static Graph g;
    
    public MainFrame() 
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        openFile = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        printInput = new javax.swing.JButton();
        drawGraph = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        bipartiteButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Final Project");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        openFile.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        openFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalproject/imgs/folder_32.png"))); // NOI18N
        openFile.setText("Open File");
        openFile.setFocusable(false);
        openFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        jToolBar1.add(openFile);
        jToolBar1.add(jSeparator1);

        printInput.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        printInput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalproject/imgs/page_table_32.png"))); // NOI18N
        printInput.setText("Print Input");
        printInput.setEnabled(false);
        printInput.setFocusable(false);
        printInput.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        printInput.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        printInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printInputActionPerformed(evt);
            }
        });
        jToolBar1.add(printInput);

        drawGraph.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        drawGraph.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalproject/imgs/draw_vertex.png"))); // NOI18N
        drawGraph.setText("Draw Graph");
        drawGraph.setEnabled(false);
        drawGraph.setFocusable(false);
        drawGraph.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        drawGraph.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        drawGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawGraphActionPerformed(evt);
            }
        });
        jToolBar1.add(drawGraph);
        jToolBar1.add(jSeparator2);

        bipartiteButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        bipartiteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalproject/imgs/hbox.png"))); // NOI18N
        bipartiteButton.setText("Check Bipartite");
        bipartiteButton.setEnabled(false);
        bipartiteButton.setFocusable(false);
        bipartiteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bipartiteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bipartiteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bipartiteButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(bipartiteButton);
        jToolBar1.add(jSeparator3);

        exitButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        exitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalproject/imgs/door.png"))); // NOI18N
        exitButton.setText("Exit");
        exitButton.setFocusable(false);
        exitButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exitButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(exitButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        
        JFileChooser fc = new JFileChooser("C:\\Users\\Jaime Andres\\Desktop\\Graph Drawing Final Project\\FinalProject\\src\\finalproject");        
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        fc.setFileFilter(filter);
        
        int ret = fc.showOpenDialog(null);
        
        if (ret == JFileChooser.APPROVE_OPTION) 
        {
             File file = fc.getSelectedFile();
             
             // After opening the file, parse the adjacency matrix
             parseInput(file);
             
             // enabled buttons
             enableButtons();
        }


    }//GEN-LAST:event_openFileActionPerformed

    private void enableButtons()
    {
        printInput.setEnabled(true);
        drawGraph.setEnabled(true);        
        bipartiteButton.setEnabled(true);
    }
    
    private void printInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printInputActionPerformed
       printInput();
    }//GEN-LAST:event_printInputActionPerformed

    private void drawGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawGraphActionPerformed
        
        GraphDraw frame = new GraphDraw("Graph");
        int low = 100;
        int high = 500;
        
        frame.setSize(700, 700);
        frame.setLocationRelativeTo(null);
        frame.setResizable(false);
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.setVisible(true);
        
        
        // Initialize the randomizer
        Random rand = new Random();
        
        // Add nodes
        for (Vertex v: g.getVertices())
        {
            frame.addNode(v.getId() + "", rand.nextInt(high - low) + low, rand.nextInt(high - low) + low);
        }
        
        // Add edges
        for ( Edge e : g.getEdges() )
        {
            frame.addEdge(e.getA().getId(), e.getB().getId());
        }
    }//GEN-LAST:event_drawGraphActionPerformed

    private void bipartiteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bipartiteButtonActionPerformed
        
        /* Check if the graph is Bipartite */
        boolean result = Bipartite.isBipartite(g);
        
        if ( result == true )
        {
            JOptionPane.showMessageDialog(null, "The Graph Is Bipartite", "Message", JOptionPane.INFORMATION_MESSAGE);
            
            /* If It's Bipartite, call the drawing algorithm */
            drawBipartiteGraph();
        }
        else
        {
            JOptionPane.showMessageDialog(null, "The Graph Is Not Bipartite", "Message", JOptionPane.ERROR_MESSAGE);                
        }
    }//GEN-LAST:event_bipartiteButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void drawBipartiteGraph()
    {
        GraphDraw frame = new GraphDraw("Bipartite Graph");
        int x1 = 250;
        int x2 = 450;
        int y = 100;
        
        frame.setSize(700, 700);
        frame.setLocationRelativeTo(null);
        frame.setResizable(false);
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.setVisible(true);
        
        
        // Initialize the randomizer
        Random rand = new Random();
        
        // Add nodes
        int colorCounter = 0;
        int[] colors = Bipartite.getColoredSet(g);
        
        for (Vertex v: g.getVertices())
        {
            if ( colors[colorCounter] == 1 )
                frame.addNode(v.getId() + "", x1, y);
            else if ( colors[colorCounter] == 2 )
                frame.addNode(v.getId() + "", x2, y);
            
            y = y + 50;
            colorCounter++;
        }
        
        // Add edges
        for ( Edge e : g.getEdges() )
        {
            frame.addEdge(e.getA().getId(), e.getB().getId());
        }
    }
    
    private void parseInput(File file)
    {
        try 
        {
           // Initialize the matrix
           AdjacencyMatrix matrix = new AdjacencyMatrix();
           
           BufferedReader input = new BufferedReader(new FileReader(file));           
           String line;
           
           
           while ( (line = input.readLine()) != null )
           {
               String[] cols = line.split(" "); // split line on single space character
                              
               ArrayList<String> row = new ArrayList<String>();
               
               for (String c : cols )
                   row.add(c);
               
               matrix.addRow(row);               
           }
           
           // Assign Matrix to Graph
           g = new Graph(matrix);
        }
        catch (Exception e)
        {
            System.out.println("Error reading.");
            System.out.println(e.getMessage());            
        }
        
    }
    
    private void printInput()
    {
        g.getMatrix().printMatrix();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bipartiteButton;
    private javax.swing.JButton drawGraph;
    private javax.swing.JButton exitButton;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton openFile;
    private javax.swing.JButton printInput;
    // End of variables declaration//GEN-END:variables
}
